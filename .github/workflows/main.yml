name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          $UserName = "Paradox Windows"
          $PlainPassword = "para@123"
          $SecurePassword = ConvertTo-SecureString $PlainPassword -AsPlainText -Force
          New-LocalUser -Name $UserName -Password $SecurePassword -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $UserName
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $UserName

          echo "RDP_CREDS=UserName:: $UserName `n Password:: $PlainPassword" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name $UserName)) {
            Write-Error "User creation failed"
          exit 1
          }

      - name: Disable Windows Firewall
        run: |
           Set-NetFirewallProfile -Profile Domain,Private,Public -Enabled False

      - name: Install NetBird vpm
        run: |
          $birdnetMsi="https://pkgs.netbird.io/windows/msi/x64"
          $birdNetInstallPath="$env:TEMP\birdnet.msi"
          Invoke-WebRequest -Uri $birdnetMsi -OutFile $birdNetInstallPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$birdNetInstallPath`"", "/quiet", "/norestart" -Wait
          

      - name: Establish NetBird Connection
        run: |
          # Setting up netbird key
          & "$env:ProgramFiles\Netbird\netbird.exe" up --setup-key FB691520-ACB0-4217-9FCF-3E4899504DD2
          # Wait for NetBird  to assign IP
          Start-Sleep -Seconds 5
          $netbirdIP=& "$env:ProgramFiles\Netbird\netbird.exe" status
          $NetBirdIP=($netbirdIP | Select-String "NetBird IP:").Line.Split(':')[1].Trim()
          echo $NetBirdIP >> "$env:TEMP\netBirdIP.txt"
          Write-Host "NetBird IP Address: $NetBirdIP"
          

          
          

      - name: Install Tailscale
        run: |
         
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.86.2-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Windows Firewall disabled and Tailscale restarted (remote)"
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "NetBird IP::"
          cat "$env:TEMP\netBirdIP.txt"
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "$(echo $env:RDP_CREDS) `n"
          Write-Host "==================`n"
          
          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
